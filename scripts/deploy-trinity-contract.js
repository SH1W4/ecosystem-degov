// SPDX-License-Identifier: MIT
const { ethers } = require("hardhat");

async function main() {
    console.log("üß† Deployando Trinity ESG Contract...");

    const [deployer] = await ethers.getSigners();
    console.log(`üë§ Deployer: ${deployer.address}`);
    console.log(`üí∞ Saldo do deployer: ${ethers.formatEther(await ethers.provider.getBalance(deployer.address))} ETH`);

    // Endere√ßos dos tokens (assumindo que j√° foram deployados)
    const GST_TOKEN_ADDRESS = "0x5fbdb2315678afecb367f032d93f642f64180aa3"; // GST Token
    const AET_TOKEN_ADDRESS = "0x9fe46736679d2d9a65f0992f2272de9f3c7fa6e0"; // AET Token
    const NFE_NFT_ADDRESS = "0x0000000000000000000000000000000000000000"; // NFT NFe (ser√° deployado depois)

    console.log("\nüìã Endere√ßos dos tokens:");
    console.log(`   GST Token: ${GST_TOKEN_ADDRESS}`);
    console.log(`   AET Token: ${AET_TOKEN_ADDRESS}`);
    console.log(`   NFT NFe: ${NFE_NFT_ADDRESS}`);

    // Deploy Trinity ESG Contract
    console.log("\nüèóÔ∏è Deployando TrinityESGContract...");
    const TrinityESGContract = await ethers.getContractFactory("TrinityESGContract");
    const trinityContract = await TrinityESGContract.deploy(
        GST_TOKEN_ADDRESS,
        AET_TOKEN_ADDRESS,
        NFE_NFT_ADDRESS
    );
    await trinityContract.waitForDeployment();

    console.log(`‚úÖ Trinity ESG Contract: ${await trinityContract.getAddress()}`);

    // Verificar configura√ß√µes
    console.log("\n‚öôÔ∏è Configura√ß√µes do contrato:");
    const baseRewardRate = await trinityContract.baseRewardRate();
    const bonusMultiplier = await trinityContract.bonusMultiplier();
    const highEsgThreshold = await trinityContract.highEsgThreshold();

    console.log(`   Taxa de recompensa base: ${baseRewardRate} GST por 1.0 ESG Score`);
    console.log(`   Multiplicador de bonus: ${bonusMultiplier}%`);
    console.log(`   Threshold para bonus: ${highEsgThreshold}%`);

    // Testar funcionalidade b√°sica
    console.log("\nüß™ Testando funcionalidade b√°sica...");

    // Simular an√°lise de NFe
    const testNFEData = {
        chaveAcesso: "35240114200166000187550010000000271123456789",
        valorTotal: ethers.parseEther("2500"), // 2500 tokens
        categoria: "Energia Renovavel",
        municipio: "S√£o Paulo",
        uf: "SP",
        cnpjEmitente: "14200166000187",
        cnpjDestinatario: "12345678000195",
        dataEmissao: Math.floor(Date.now() / 1000),
        isVerificada: true
    };

    console.log("   üìä Analisando NFe de teste...");
    const tx = await trinityContract.analyzeNFEWithTrinity(testNFEData);
    const receipt = await tx.wait();

    console.log(`   ‚úÖ An√°lise conclu√≠da! Gas usado: ${receipt.gasUsed}`);

    // Obter ESG Score
    const esgScore = await trinityContract.getESGScore(testNFEData.chaveAcesso);
    console.log(`   üìà ESG Score: ${esgScore.totalScore}%`);
    console.log(`   üå± Ambiental: ${esgScore.environmental}%`);
    console.log(`   üë• Social: ${esgScore.social}%`);
    console.log(`   üèõÔ∏è Governan√ßa: ${esgScore.governance}%`);
    console.log(`   üéØ Confian√ßa: ${esgScore.confidence}%`);

    // Obter recompensas
    const rewards = await trinityContract.getRewards(testNFEData.chaveAcesso);
    console.log(`   üí∞ Recompensa GST: ${ethers.formatEther(rewards.gstAmount)} GST`);
    console.log(`   ü§ñ Recompensa AET: ${ethers.formatEther(rewards.aetAmount)} AET`);

    // Testar otimiza√ß√£o Trinity
    console.log("\n‚ö° Testando otimiza√ß√£o Trinity...");
    const optimizationTx = await trinityContract.optimizeWithTrinity();
    const optimizationReceipt = await optimizationTx.wait();

    console.log(`   ‚úÖ Otimiza√ß√£o conclu√≠da! Gas usado: ${optimizationReceipt.gasUsed}`);
    console.log(`   üìà Melhoria: 15% (simulada)`);

    // Resumo final
    console.log("\nüéâ DEPLOY TRINITY ESG CONTRACT CONCLU√çDO!");
    console.log("=" * 60);
    console.log(`üë§ Deployer: ${deployer.address}`);
    console.log(`üèóÔ∏è Trinity ESG Contract: ${await trinityContract.getAddress()}`);
    console.log(`üîó GST Token: ${GST_TOKEN_ADDRESS}`);
    console.log(`üîó AET Token: ${AET_TOKEN_ADDRESS}`);
    console.log(`üîó NFT NFe: ${NFE_NFT_ADDRESS}`);

    console.log("\nüí° Para testar:");
    console.log("npx hardhat console --network localhost");
    console.log(`const Trinity = await ethers.getContractAt("TrinityESGContract", "${await trinityContract.getAddress()}")`);
    console.log("await Trinity.baseRewardRate()");
    console.log("await Trinity.bonusMultiplier()");
    console.log("await Trinity.highEsgThreshold()");

    console.log("\nüß† Trinity AI: Contrato ESG integrado com rede neural!");
    console.log("‚ö° Sistema pronto para an√°lise ESG autom√°tica!");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Erro fatal:", error);
        process.exit(1);
    });
